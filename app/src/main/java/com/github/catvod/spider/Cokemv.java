//
// Decompiled by Jadx - 1034ms
//
package com.github.catvod.spider;

import android.content.Context;
import android.text.TextUtils;
import com.github.catvod.crawler.Spider;
import com.github.catvod.crawler.SpiderDebug;
import com.github.catvod.spider.merge.S;
import com.github.catvod.spider.merge.g;
import com.github.catvod.spider.merge.jQ;
import com.github.catvod.spider.merge.piP;
import com.github.catvod.spider.merge.q;
import com.github.catvod.spider.merge.up;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.TreeMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class Cokemv extends Spider {
    private JSONObject f;
    private JSONObject r;
    private Pattern JR = Pattern.compile(piP.d("48331A28361517205A641E084C6C5B2436010B"));
    private Pattern p = Pattern.compile(piP.d("48331A28260913241C206D443B215E656C04132819"));
    private Pattern n = Pattern.compile(piP.d("48331A283200063C5A641E084C6C58641E084C6C58641E084C6C5B2436010B"));
    private Pattern L = Pattern.compile(piP.d("48331A28310408325A641E3F4C6C5B2436010B"));

    protected static HashMap<String, String> p() {
        HashMap<String, String> hashMap = new HashMap<>();
        hashMap.put(piP.d("3236103E6F2D00201B38"), piP.d("2A2A0F252E00066A4062724C4F121C22260310365502164C56755B7C794C302C1B7A7657473D43786B4C26350520273B02273E25364352764262715A476D3E0416212B6955202B07026532292107086C550F2A1E08281063735C556B4562775C57705B7A704C3424132D30054870467B6C5F51"));
        hashMap.put(piP.d("262616293218"), piP.d("13200D386D0413281960231C17291C2F23180E2A1B633A04132819673A010B69143C32000E2614382B03096A0D212E57167845627B400E28142B274306331C2A6E050A2412296D1B022705602B0106221063231C092259666D465C34487C6C544B24053C2E05042401252D0248361C2B2C09036810342104062B1229791A5A2746773351576B4C"));
        hashMap.put(piP.d("2626162932184A201B2F2D080E2B12"), piP.d("003F1C3C6E4C0320132023180269552E30"));
        hashMap.put(piP.d("2626162932184A2914222519062210"), piP.d("1D2D581F05401D2D4E3D7F5C497C59292C4120074E3D7F5C497D59292C571678456275401D2D580F0C571678456274"));
        return hashMap;
    }

    protected static HashMap<String, String> r() {
        HashMap<String, String> hashMap = new HashMap<>();
        hashMap.put(piP.d("3236103E6F2D00201B38"), piP.d("2A2A0F252E00066A4062724C4F121C22260310365502164C56755B7C794C302C1B7A7657473D43786B4C26350520273B02273E25364352764262715A476D3E0416212B6955202B07026532292107086C550F2A1E08281063735C556B4562775C57705B7A704C3424132D30054870467B6C5F51"));
        hashMap.put(piP.d("35201329300915"), piP.d("0F31013C3156486A162329090A335B2127"));
        return hashMap;
    }

    protected HashMap<String, String> JR(String str) {
        HashMap<String, String> hashMap = new HashMap<>();
        hashMap.put(piP.d("0A2001242D08"), piP.d("200021"));
        hashMap.put(piP.d("2F2A0638"), piP.d("042A1E292F1A492810"));
        String d = piP.d("3235123E230802683C223109043007296F3E02340029311814");
        String d2 = piP.d("56");
        hashMap.put(d, d2);
        hashMap.put(piP.d("230B21"), d2);
        hashMap.put(piP.d("3236103E6F2D00201B38"), piP.d("2A2A0F252E00066A4062724C4F08142F2B02132A0624794C2E2B01292E4C2A24166C0D3F471D557D723356702A7B6B4C26350520273B02273E25364352764262715A476D3E0416212B6955202B07026532292107086C550F2A1E082810637B5D49755B78765B556B447D764C3424132D30054870467B6C5F51"));
        hashMap.put(piP.d("262616293218"), piP.d("13200D386D0413281960231C17291C2F23180E2A1B633A04132819673A010B69143C32000E2614382B03096A0D212E57167845627B400E28142B27431020173C6E46486F4E3D7F5C497D"));
        hashMap.put(piP.d("2626162932184A0914222519062210"), piP.d("1D2D580F0C401D2D4E3D7F5C497D59362A4133124E3D7F5C497259362A412F0E4E3D7F5C497059292C4132164E3D7F5C497659292C571678456270"));
        return hashMap;
    }

    /* JADX WARN: Code restructure failed: missing block: B:25:0x0111, code lost:
        r5 = 0;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public String categoryContent(String str, String str2, boolean z, HashMap<String, String> hashMap) {
        int i;
        int i2;
        String d = piP.d("4A");
        try {
            String[] strArr = {"", "", "", "", "", "", "", "", "", "", "", ""};
            strArr[0] = str;
            strArr[8] = str2;
            if (hashMap != null && hashMap.size() > 0) {
                for (String str3 : hashMap.keySet()) {
                    strArr[Integer.parseInt(str3)] = URLEncoder.encode(hashMap.get(str3));
                }
            }
            String str4 = piP.d("0F31013C3156486A162329090A335B212743112A113F2A03106A") + TextUtils.join(d, strArr) + piP.d("492D01212E");
            String n = jQ.n(str4, JR(str4));
            q r = S.r(n);
            JSONObject jSONObject = new JSONObject();
            up x = r.x(piP.d("032C03172B085A35142B2731"));
            int size = x.size();
            String d2 = piP.d("0F37102A");
            if (size != 0) {
                int i3 = 0;
                while (true) {
                    if (i3 >= x.size()) {
                        i = -1;
                        break;
                    } else if (((g) x.get(i3)).yB(piP.d("06")) == null) {
                        i3++;
                    } else {
                        String n2 = r.x(piP.d("143514226C1C0622106121191537102236")).n();
                        String p = r.x(piP.d("032C03172B085A35142B27314724")).JR().p(d2);
                        i = Integer.parseInt(n2);
                        Matcher matcher = this.L.matcher(p);
                        if (matcher.find()) {
                            i2 = Integer.parseInt(matcher.group(1).split(d)[8]);
                        }
                    }
                }
            } else {
                i2 = Integer.parseInt(str2);
                i = i2;
            }
            JSONArray jSONArray = new JSONArray();
            if (!n.contains(piP.d("81F7D4AADEE581CCCBA9CADC81C7DDAAC1DF8FE3F4ABD8E880FEE6AADCF082D6D3"))) {
                up x2 = r.x(piP.d("032C03622F03033019296F01062C1B722605116B182326190B20582536090A364B2D"));
                for (int i4 = 0; i4 < x2.size(); i4++) {
                    g gVar = (g) x2.get(i4);
                    String p2 = gVar.p(piP.d("132C012027"));
                    String p3 = gVar.yB(piP.d("0E2812622E0D1D3C19232308")).p(piP.d("0324012D6F03152C12252C0D0B"));
                    String A2 = gVar.yB(piP.d("032C03622F03033019296F05132018612C031320")).A2();
                    Matcher matcher2 = this.p.matcher(gVar.p(d2));
                    if (matcher2.find()) {
                        String group = matcher2.group(1);
                        JSONObject jSONObject2 = new JSONObject();
                        jSONObject2.put(piP.d("112A11132B08"), group);
                        jSONObject2.put(piP.d("112A11132C0D0A20"), p2);
                        jSONObject2.put(piP.d("112A1113320504"), p3);
                        jSONObject2.put(piP.d("112A111330090A24072731"), A2);
                        jSONArray.put(jSONObject2);
                    }
                }
            }
            jSONObject.put(piP.d("17241229"), i);
            jSONObject.put(piP.d("172412292103122B01"), i2);
            jSONObject.put(piP.d("0B2C182536"), 48);
            jSONObject.put(piP.d("132A012D2E"), i2 <= 1 ? jSONArray.length() : i2 * 48);
            jSONObject.put(piP.d("0B2C0638"), jSONArray);
            return jSONObject.toString();
        } catch (Exception e) {
            SpiderDebug.log(e);
            return "";
        }
    }

    public String detailContent(List<String> list) {
        String str;
        Exception e;
        boolean z;
        String d = piP.d("4A");
        String d2 = piP.d("142D");
        String d3 = piP.d("436151");
        String d4 = piP.d("4B");
        String d5 = piP.d("032C03622F03033019296F05132018613205047B1C2125");
        String d6 = piP.d("032C03622F03033019296F0509231A612B180228582F2D0213201B38");
        String d7 = piP.d("06");
        try {
            q r = S.r(jQ.n(piP.d("0F31013C3156486A162329090A335B212743112A11282718062C1963") + list.get(0) + piP.d("492D01212E"), r()));
            JSONObject jSONObject = new JSONObject();
            JSONObject jSONObject2 = new JSONObject();
            up x = r.x(piP.d("032C03622F03033019296F0513201861210311200772260511"));
            String r2 = ((g) x.get(0)).x(d5).r(piP.d("0324012D6F03152C12252C0D0B"));
            String r3 = ((g) x.get(0)).x(d5).r(piP.d("062901"));
            up x2 = r.x(piP.d("032C03622F03033019296F0509231A61360D006819252C07"));
            String n = ((g) x2.get(2)).x(d7).n();
            str = "";
            try {
                String n2 = ((g) x2.get(1)).x(d7).n();
                String n3 = ((g) x2.get(0)).x(d7).n();
                String A2 = ((g) r.x(d6).get(4)).A2();
                ArrayList arrayList = new ArrayList();
                up x3 = ((g) r.x(d6).get(2)).x(d7);
                for (int i = 0; i < x3.size(); i++) {
                    try {
                        arrayList.add(((g) x3.get(i)).A2());
                    } catch (Exception e2) {
                        e = e2;
                    }
                }
                String join = TextUtils.join(d4, arrayList);
                ArrayList arrayList2 = new ArrayList();
                up x4 = ((g) r.x(d6).get(0)).x(d7);
                for (int i2 = 0; i2 < x4.size(); i2++) {
                    arrayList2.add(((g) x4.get(i2)).A2());
                }
                String join2 = TextUtils.join(d4, arrayList2);
                String trim = r.yB(piP.d("032C03622F03033019296F0509231A612B0213371A28370F132C1A226F0F082B01292C185935")).A2().trim();
                jSONObject2.put(piP.d("112A11132B08"), list.get(0));
                jSONObject2.put(piP.d("112A11132C0D0A20"), r3);
                jSONObject2.put(piP.d("112A1113320504"), r2);
                jSONObject2.put(piP.d("133C05291D02062810"), n);
                jSONObject2.put(piP.d("112A11133B090637"), n3);
                jSONObject2.put(piP.d("112A1113231E0224"), n2);
                jSONObject2.put(piP.d("112A111330090A24072731"), A2);
                jSONObject2.put(piP.d("112A1113230F132A07"), join);
                jSONObject2.put(piP.d("112A11132605152016382D1E"), join2);
                jSONObject2.put(piP.d("112A111321030931102236"), trim);
                try {
                    TreeMap treeMap = new TreeMap((Comparator) new Cokemv$1(this));
                    ArrayList x5 = r.x(piP.d("032C03622F03033019296F180627582536090A36582E2D1459211C3A7C1F17241B"));
                    up x6 = r.x(piP.d("032C03622F03033019296F000E3601722605116B182326190B20583C2E0D1E6819253118"));
                    for (int i3 = 0; i3 < x5.size(); i3++) {
                        String A22 = ((g) x5.get(i3)).A2();
                        Iterator<String> keys = this.r.keys();
                        while (true) {
                            if (!keys.hasNext()) {
                                d2 = d2;
                                z = false;
                                break;
                            }
                            String next = keys.next();
                            d2 = d2;
                            if (this.r.getJSONObject(next).getString(d2).equals(A22)) {
                                A22 = this.r.getJSONObject(next).getString(d2);
                                z = true;
                                break;
                            }
                            d2 = d2;
                        }
                        if (!z) {
                            x5 = x5;
                            d = d;
                        } else {
                            up x7 = ((g) x6.get(i3)).x(piP.d("032C03622F03033019296F1C0B240C612E051431582F2D0213201B387C0D"));
                            ArrayList arrayList3 = new ArrayList();
                            for (int i4 = 0; i4 < x7.size(); i4++) {
                                g gVar = (g) x7.get(i4);
                                Matcher matcher = this.n.matcher(gVar.p(piP.d("0F37102A")));
                                if (!matcher.find()) {
                                    x5 = x5;
                                    d = d;
                                } else {
                                    StringBuilder sb = new StringBuilder();
                                    sb.append(matcher.group(1));
                                    d = d;
                                    sb.append(d);
                                    x5 = x5;
                                    sb.append(matcher.group(2));
                                    sb.append(d);
                                    sb.append(matcher.group(3));
                                    String sb2 = sb.toString();
                                    arrayList3.add(gVar.A2() + piP.d("43") + sb2);
                                }
                            }
                            x5 = x5;
                            d = d;
                            String join3 = arrayList3.size() > 0 ? TextUtils.join(piP.d("44"), arrayList3) : str;
                            if (join3.length() != 0) {
                                treeMap.put(A22, join3);
                            }
                        }
                    }
                    if (treeMap.size() > 0) {
                        String join4 = TextUtils.join(d3, treeMap.keySet());
                        String join5 = TextUtils.join(d3, treeMap.values());
                        jSONObject2.put(piP.d("112A11133200063C2A2A30030A"), join4);
                        jSONObject2.put(piP.d("112A11133200063C2A393000"), join5);
                    }
                    JSONArray jSONArray = new JSONArray();
                    jSONArray.put(jSONObject2);
                    jSONObject.put(piP.d("0B2C0638"), jSONArray);
                    return jSONObject.toString();
                } catch (Exception e3) {
                    e = e3;
                    SpiderDebug.log(e);
                    return str;
                }
            } catch (Exception e4) {
                e = e4;
            }
        } catch (Exception e5) {
            e = e5;
            str = "";
        }
    }

    public String homeContent(boolean z) {
        String d;
        int i;
        String d2 = piP.d("0F31013C3156486A162329090A335B2127");
        try {
            q r = S.r(jQ.n(d2, JR(d2)));
            up x = r.x(piP.d("12295B22231A052407612B18022806722E05492B143A200D15681C3827015924"));
            JSONArray jSONArray = new JSONArray();
            Iterator it = x.iterator();
            while (true) {
                boolean hasNext = it.hasNext();
                d = piP.d("0F37102A");
                i = 0;
                if (!hasNext) {
                    break;
                }
                g gVar = (g) it.next();
                String A2 = gVar.A2();
                if (A2.equals(piP.d("81CFE3A5DDDF80D1C0A9FFDD")) || A2.equals(piP.d("80D1C0A4E5EA82CCD2")) || A2.equals(piP.d("80D1C0A9FFDD")) || A2.equals(piP.d("82CFDDAAFEC7")) || A2.equals(piP.d("80FEC9A4CBD6"))) {
                    i = 1;
                }
                if (i != 0) {
                    Matcher matcher = this.JR.matcher(gVar.p(d));
                    if (matcher.find()) {
                        String trim = matcher.group(1).trim();
                        JSONObject jSONObject = new JSONObject();
                        jSONObject.put(piP.d("133C05291D0503"), trim);
                        jSONObject.put(piP.d("133C05291D02062810"), A2);
                        jSONArray.put(jSONObject);
                    }
                }
            }
            JSONObject jSONObject2 = new JSONObject();
            if (z) {
                jSONObject2.put(piP.d("012C1938271E14"), this.f);
            }
            jSONObject2.put(piP.d("0429143F31"), jSONArray);
            try {
                up x2 = ((g) r.x(piP.d("032C03622F03033019296F01062C1B")).get(0)).x(piP.d("032C03622F03033019296F051320183F7C0D"));
                JSONArray jSONArray2 = new JSONArray();
                while (i < x2.size()) {
                    g gVar2 = (g) x2.get(i);
                    String p = gVar2.p(piP.d("132C012027"));
                    String p2 = gVar2.yB(piP.d("0E2812622E0D1D3C19232308")).p(piP.d("0324012D6F03152C12252C0D0B"));
                    String A22 = gVar2.yB(piP.d("032C03622F03033019296F05132018612C031320")).A2();
                    Matcher matcher2 = this.p.matcher(gVar2.p(d));
                    if (matcher2.find()) {
                        String group = matcher2.group(1);
                        JSONObject jSONObject3 = new JSONObject();
                        jSONObject3.put(piP.d("112A11132B08"), group);
                        jSONObject3.put(piP.d("112A11132C0D0A20"), p);
                        jSONObject3.put(piP.d("112A1113320504"), p2);
                        jSONObject3.put(piP.d("112A111330090A24072731"), A22);
                        jSONArray2.put(jSONObject3);
                    }
                    i++;
                }
                jSONObject2.put(piP.d("0B2C0638"), jSONArray2);
            } catch (Exception e) {
                SpiderDebug.log(e);
            }
            return jSONObject2.toString();
        } catch (Exception e2) {
            SpiderDebug.log(e2);
            return "";
        }
    }

    public void init(Context context) {
        Cokemv.super.init(context);
        try {
            this.r = new JSONObject(piP.d
            this.f = new JSONObject(piP.d
        } catch (JSONException e) {
            SpiderDebug.log(e);
        }
    }

    public String playerContent(String str, String str2, List<String> list) {
        String d = piP.d("123719");
        String d2 = piP.d("01371A21");
        try {
            JSONObject jSONObject = new JSONObject();
            jSONObject.put(piP.d("08371C2B2B02"), piP.d("472D0138321F5D6A5A2F2D07022803622F09"));
            jSONObject.put(piP.d("3236103E6F2D00201B38"), piP.d("47081A362B000B245A796C5C476D382D210509311A3F2A57470C1B3827004708142F622334652D6C735C3874401375454704053C2E09302017072B184870467B6C5F51655D070A382A09596C2E050C20550B270F0C2A5C6C0104152A18296D55566B4562765850775B7D73584716142A231E0E6A407F75425473"));
            jSONObject.put(piP.d("262616293218"), piP.d("476F5A66"));
            jSONObject.put(piP.d("2626162932184A0914222519062210"), piP.d("473F1D6101224B3F1D773351576B4C6027024A1026773351576B466027025C34487C6C5B"));
            jSONObject.put(piP.d("2626162932184A001B2F2D080E2B12"), piP.d("47220F2532404721102A2E0D1320"));
            String str3 = piP.d("0F31013C3156486A162329090A335B212743112A113C2E0D1E6A") + str2 + piP.d("492D01212E");
            up x = S.r(jQ.n(str3, JR(str3))).x(piP.d("142607253218"));
            JSONObject jSONObject2 = new JSONObject();
            int i = 0;
            while (true) {
                if (i >= x.size()) {
                    break;
                }
                String trim = ((g) x.get(i)).U().trim();
                if (trim.startsWith(piP.d("1124076C3200063C103E1D"))) {
                    JSONObject jSONObject3 = new JSONObject(trim.substring(trim.indexOf(123), trim.lastIndexOf(125) + 1));
                    if (this.r.has(jSONObject3.getString(d2))) {
                        JSONObject jSONObject4 = this.r.getJSONObject(jSONObject3.getString(d2));
                        String string = jSONObject3.getString(d);
                        String string2 = jSONObject4.getString(piP.d("1730"));
                        jSONObject2.put(piP.d("1724073F27"), jSONObject4.getInt(piP.d("142B")));
                        jSONObject2.put(piP.d("17291435171E0B"), string2);
                        jSONObject2.put(d, string);
                        jSONObject2.put(piP.d("0F201428271E"), jSONObject.toString());
                    }
                } else {
                    i++;
                }
            }
            return jSONObject2.toString();
        } catch (Exception e) {
            SpiderDebug.log(e);
            return "";
        }
    }

    public String searchContent(String str, boolean z) {
        String d = piP.d("032C03622F03033019296F05132018613205047B1C2125");
        try {
            String str2 = piP.d("0F31013C3156486A023B3542142A12233742042A18633509057A0439271E1E78062536094276342F2D07022803622F094277333A2D080320012D2B004C") + URLEncoder.encode(str);
            q r = S.r(jQ.n(str2, p()));
            JSONObject jSONObject = new JSONObject();
            JSONArray jSONArray = new JSONArray();
            JSONObject jSONObject2 = new JSONObject();
            up x = r.x(piP.d("032C03620C260872012F62080E335B35373E322713"));
            for (int i = 0; i < x.size(); i++) {
                g gVar = (g) x.get(i);
                if (gVar.x(piP.d("032C03623B193510172A620D472D46")).n().contains(str)) {
                    String r2 = gVar.x(piP.d("032C03623B193510172A620D")).r(piP.d("0F37102A"));
                    q r3 = S.r(jQ.n(r2, JR(str2)));
                    Matcher matcher = this.p.matcher(r2);
                    if (matcher.find()) {
                        String group = matcher.group(1);
                        String r4 = r3.x(d).r(piP.d("0324012D6F03152C12252C0D0B"));
                        String r5 = r3.x(d).r(piP.d("062901"));
                        String A2 = ((g) r3.x(piP.d("032C03622F03033019296F0509231A612B180228582F2D0213201B38")).get(4)).A2();
                        jSONObject2.put(piP.d("112A11132C0D0A20"), r5);
                        jSONObject2.put(piP.d("112A111330090A24072731"), A2);
                        jSONObject2.put(piP.d("112A11132B08"), group);
                        jSONObject2.put(piP.d("112A1113320504"), r4);
                        jSONArray.put(jSONObject2);
                    }
                }
            }
            jSONObject.put(piP.d("0B2C0638"), jSONArray);
            return jSONObject.toString();
        } catch (Exception e) {
            SpiderDebug.log(e);
            return "";
        }
    }
}
